<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WEB开发_Spring基础使用</title>
      <link href="/2022/12/20adbbb45445.html"/>
      <url>/2022/12/20adbbb45445.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Spring概述"><a href="#一、Spring概述" class="headerlink" title="一、Spring概述"></a>一、Spring概述</h1><h2 id="1-1-课程内容介绍"><a href="#1-1-课程内容介绍" class="headerlink" title="1.1 课程内容介绍"></a>1.1 课程内容介绍</h2><ol><li>spring概念</li><li>IOC容器</li><li>Aop</li><li>JdbcTemplate</li><li>事务管理</li><li>Spring5新特性</li></ol><h2 id="1-2-框架概述"><a href="#1-2-框架概述" class="headerlink" title="1.2 框架概述"></a>1.2 框架概述</h2><p>Spring是一个开源的J2EE应用框架，对bean的生命周期进行管理的轻量型容器。</p><ol><li><p>Spring是一个轻量级的开源的Java EE框架</p></li><li><p>使用Spring的目的是解决企业应用开发的复杂性，简化企业开发</p></li><li><p>提供两个核心的部分，IOC和Aop</p></li><li><p>IOC：控制反转，把创建对象的过程交给Spring进行管理</p></li><li><p>AOP：面向切面，在不修改源代码的情况下，进行功能的增强。</p></li></ol><p>Spring的特点</p><ol><li>方便降低耦合性，简化开发</li><li>Aop编程的支持</li><li>方便程序的测试，Junit测试</li><li>方便执行各种优秀框架，可以整合比较常见的框架</li><li>降低javaapi的使用难度</li><li>方便进行事务的操作</li></ol><!--?xml version="1.0" encoding="UTF-8"?--><p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></beans></p><pre><code>&lt;!--配置User对象的创建--&gt;&lt;bean id="user" class="com.atguigu.java.User"&gt;&lt;/bean&gt;</code></pre>  <p>package com.atguigu.java;</p><p>import org.junit.Test;<br>import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;</p><p>import javax.jws.soap.SOAPBinding;</p><p>public class TestDemo {</p><pre><code>@Testpublic void test1(){    //1.加载配置文件    ApplicationContext context =            new ClassPathXmlApplicationContext("bean1.xml");    //2.得到对象    User u = context.getBean("user",User.class);    //3.测试    System.out.println(u);    u.add();}</code></pre><p>}</p><h1 id="二、IOC"><a href="#二、IOC" class="headerlink" title="二、IOC"></a>二、IOC</h1><h2 id="2-1-容器"><a href="#2-1-容器" class="headerlink" title="2.1 容器"></a>2.1 容器</h2><h3 id="2-1-1-IOC底层原理"><a href="#2-1-1-IOC底层原理" class="headerlink" title="2.1.1 IOC底层原理"></a>2.1.1 IOC底层原理</h3><p><strong>什么是IOC</strong></p><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/254878">面向对象编程</a>中的一种设计原则，可以用来减低计算机<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81/86048">代码</a>之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>。其中最常见的方式叫做<a href="https://baike.baidu.com/item/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/5177233"><strong>依赖注入</strong></a>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p><p>IOC叫做反转控制，说的通俗点，就是在操作中，创建类的对象不用原始方式来new对象。IOC将对象的创建和对象之间的调用过程交给Spring进行管理。</p><p>使用IOC的目的是为了让程序的耦合度降低。</p><p>IOC底层原理</p><ul><li>Xml解析</li><li>工厂模式</li><li>反射</li></ul><p>class UserFactory{<br>  public static UserDao getDao(){<br>    String classValue = class属性值;//xml解析<br>    Class clazz = Class.forName(classValue);<br>    return (UserDao)clazz.newInstance();<br>  }<br>}</p><p>IOC思想基于IOC容器完成， 底层就是对象工厂。</p><h3 id="2-1-2-BeanFactory"><a href="#2-1-2-BeanFactory" class="headerlink" title="2.1.2 BeanFactory"></a>2.1.2 BeanFactory</h3><p>Spring中为IOC容器实现提供两种方式，加载配置文件</p><ol><li>BeanFactory IOC容器最基本实现方式，Spring内置的实现方式，一般开发中不经常使用。</li></ol><ul><li>加载配置文件的时候不会创建对象，在获取对象的时候才创建对象</li></ul><ol start="2"><li>ApplicationContext 是BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用</li></ol><ul><li>加载配置文件的时候就会创建对象</li><li>ClassPathXmlApplicationContext 实现类表示src下</li><li>FileSystemXmlApplicationContext 表示物理路径</li></ul><h2 id="2-2-IOC操作Bean管理"><a href="#2-2-IOC操作Bean管理" class="headerlink" title="2.2 IOC操作Bean管理"></a>2.2 IOC操作Bean管理</h2><h3 id="2-2-1-基于Xml进行Bean管理"><a href="#2-2-1-基于Xml进行Bean管理" class="headerlink" title="2.2.1 基于Xml进行Bean管理"></a>2.2.1 基于Xml进行Bean管理</h3><p>什么是Bean管理：Bean管理指的是两个操作</p><ul><li><p>Spring创建对象</p></li><li><p>Spring注入属性</p><!--配置User对象的创建--><bean id="user" class="com.atguigu.java.User"></bean></li></ul><p>在Spring配置文件中，是用bean标签，标签里面添加对应属性。</p><ul><li><p>在bean标签中有很多属性，介绍常用的属性</p></li><li><p>id属性：指并不是创建对象的名字，而是起一个标识</p></li><li><p>class属性：指定创建类的全路径</p></li><li><p>name属性：和id一样，区别在于id不可以添加符号，name可以添加符号</p></li></ul><p>创建对象的时候默认使用无参数的构造方法</p><p>基于XMl方式注入属性</p><h3 id="2-2-2-XML属性注入"><a href="#2-2-2-XML属性注入" class="headerlink" title="2.2.2 XML属性注入"></a>2.2.2 XML属性注入</h3><h4 id="a-gt-property"><a href="#a-gt-property" class="headerlink" title="a> property"></a>a&gt; property</h4><ol><li>创建类，定义属性和set方法</li></ol><p>package com.atguigu.java;</p><p>public class Book {<br>    private String book_name;<br>    private String book_author;</p><pre><code>public void setBook_name(String book_name) {    this.book_name = book_name;}public void setBook_author(String book_author) {    this.book_author = book_author;}</code></pre><p>}</p><ol start="2"><li>在spring配置文件中配置对象创建，配置属性注入</li></ol><!--?xml version="1.0" encoding="UTF-8"?--><p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></beans></p><pre><code>&lt;!--配置User对象的创建--&gt;&lt;bean id="user" class="com.atguigu.java.User"&gt;&lt;/bean&gt;&lt;bean id="book" class="com.atguigu.java.Book"&gt;    &lt;!--使用property完成属性注入    name 类里面的属性名称    value 要向属性中注入的值    --&gt;    &lt;property name="book_name" value="newbook"&gt;&lt;/property&gt;    &lt;property name="book_author" value="Tom"&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre>  <ol start="3"><li><p>测试注入状态</p><p>@Test<br>public void testBook(){<br>//1.导入配置文件<br>ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(“bean1.xml”);<br>//2.获取对象（通过spring）<br>Book book1 = context.getBean(“book”,Book.class);<br><br>System.out.println(book1);<br>book1.testValues();<br>}</p></li></ol><h4 id="b-gt-通过构造器"><a href="#b-gt-通过构造器" class="headerlink" title="b> 通过构造器"></a>b&gt; 通过构造器</h4><ol><li>创建累定义属性和有参构造器</li></ol><p>/**</p><ul><li>使用有参构造器<br> */<br>public class Order  {<br> //属性<br> private String name;<br> private String address;<br> //有参构造器<br> public Order(String name, String address) {<br> this.name = name;<br> this.address = address;<br> }<br>}</li></ul><ol start="2"><li>在spring配置文件中进行配置</li></ol> <bean id="order" class="com.atguigu.java.Order">        <constructor-arg name="name" value="alex"></constructor-arg>        <constructor-arg name="address" value="China"></constructor-arg>    </bean>  <p>3.测试注入状态</p><pre><code>@Testpublic void testValue(){    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("bean1.xml");    Order order = context.getBean("order", Order.class);    System.out.println(order);    order.testValue();}</code></pre><h4 id="c-gt-p名称空间"><a href="#c-gt-p名称空间" class="headerlink" title="c> p名称空间"></a>c&gt; p名称空间</h4><ol><li>添加p名称空间，简化xml方式</li></ol><p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></beans></p><ol start="2"><li>进行属性注入</li></ol><bean id="book" class="com.atguigu.java.Book" p:book_author="abc" p:book_name="abcd">  <h3 id="2-2-3-注入空值和特殊字符"><a href="#2-2-3-注入空值和特殊字符" class="headerlink" title="2.2.3 注入空值和特殊字符"></a>2.2.3 注入空值和特殊字符</h3><ol><li>注入空值</li></ol><bean id="book" class="com.atguigu.java.Book" p:book_author="abc" p:book_name="abcd">    <!--使用property完成属性注入    name 类里面的属性名称    value 要向属性中注入的值    -->    <!--注入空值-->    <property name="book_name" value="易筋经">    <property name="book_author" value="达摩老祖">    <property name="address">        <null>    </null></property></property></property></bean>  <ol start="2"><li><p>注入特殊字符<br>通过CDATA来注入带特殊字符的内容</p><pre><code>&lt;property name="address"&gt;    &lt;value&gt;        &lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;    &lt;/value&gt;&lt;/property&gt;</code></pre></li></ol><h2 id="2-3-外部Bean"><a href="#2-3-外部Bean" class="headerlink" title="2.3 外部Bean"></a>2.3 外部Bean</h2><p>dao和service</p><p>package com.atguigu.java.dao;</p><p>public interface UserDao {<br>    public void update();<br>}</p><p>package com.atguigu.java.dao;</p><p>public class UserDaoImp implements UserDao{</p><pre><code>@Overridepublic void update() {    System.out.println("UserDaoTest");}</code></pre><p>}</p><p>package com.atguigu.java.service;</p><p>import com.atguigu.java.dao.UserDao;<br>import com.atguigu.java.dao.UserDaoImp;</p><p>public class UserService {<br>    private UserDao userDao;<br>    //提供set方法<br>    public void setUserDao(UserDao userDao) {<br>        this.userDao = userDao;<br>    }</p><pre><code>public void add(){    System.out.println("userServiceTest.........add");    System.out.println(userDao);    //创建UserDAO对象    //原始方式</code></pre><p>//        UserDao userDao = new UserDaoImp();<br>//        userDao.update();<br>    }</p><p>}</p><p>xml配置文件</p><!--?xml version="1.0" encoding="UTF-8"?--><p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></beans></p><pre><code>&lt;bean name="UserService" class="com.atguigu.java.service.UserService" &gt;    &lt;property name="userDao" ref="UserDao"&gt;&lt;/property&gt;    &lt;!--ref指定的是其他bean标签中的id值--&gt;&lt;/bean&gt;&lt;bean name="UserDao" class="com.atguigu.java.dao.UserDaoImp"&gt;&lt;/bean&gt;</code></pre>  <h2 id="2-4-内部Bean和级联赋值"><a href="#2-4-内部Bean和级联赋值" class="headerlink" title="2.4 内部Bean和级联赋值"></a>2.4 内部Bean和级联赋值</h2><p>首先明确一对多关系</p><p>例：员工和部门表就是典型的一对多关系</p><p>员工多个，部门一个</p><p>在实体类之间表示一对多关系，员工表示所属部门使用对象类型属性进行表示</p><p>package com.atguigu.order;</p><p>public class Dept {<br>    private String dname;<br>    //提供set方法<br>    public void setDname(String dname) {<br>        this.dname = dname;<br>    }<br>}</p><p>package com.atguigu.order;</p><p>public class Emp {<br>    private String ename;<br>    private String gender;<br>    private Dept dept;</p><pre><code>public void setEname(String ename) {    this.ename = ename;}public void setGender(String gender) {    this.gender = gender;}public void setDept(Dept dept) {    this.dept = dept;}</code></pre><p>}</p><!--?xml version="1.0" encoding="UTF-8"?--><p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"><br><bean id="emp" class="com.atguigu.order.Emp"><br>    <property name="ename" value="lucy"><br>    <property name="gender" value="女"><br>    <!--嵌套内部bean--><br>    <property name="dept"><br>        <bean name="dept" class="com.atguigu.order.Dept"><br>            <property name="dname" value="销售部"><br>        </property></bean><br>    </property><br></property></property></bean><br></beans></p><h2 id="2-5-xml注入集合类型属性"><a href="#2-5-xml注入集合类型属性" class="headerlink" title="2.5 &nbsp;xml注入集合类型属性"></a>2.5 &nbsp;xml注入集合类型属性</h2><h3 id="2-5-1-注入集合、数组等"><a href="#2-5-1-注入集合、数组等" class="headerlink" title="2.5.1 注入集合、数组等"></a>2.5.1 注入集合、数组等</h3><p>创建类，定义数组、list、map、set类型属性</p><p>package com.collectiontype;</p><p>import java.util.List;<br>import java.util.Map;<br>import java.util.Set;</p><p>public class Stu {<br> //1.数组类型<br> private String[] arrs;<br> //2.List<br> private List<string> list;<br> //3.Map<br> private Map&lt;Integer,String&gt; maps;<br> //4.Set<br> private Set<string> sets;</string></string></p><p> public void setSet(Set<string> sets) {<br>     this.sets = sets;<br> }</string></p><p> public void setArrs(String[] arrs) {<br>     this.arrs = arrs;<br> }</p><p> public void setList(List<string> list) {<br>     this.list = list;<br> }</string></p><p> public void setMap(Map&lt;Integer, String&gt; maps) {<br>     this.maps = maps;<br> }<br>}</p><!--?xml version="1.0" encoding="UTF-8"?--><p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"><br><bean name="stu" class="com.collectiontype.Stu"><br>    <property name="arrs"><br>        <array><br>            <value>arr1</value><br>            <value>arr2</value><br>            <value>arr3</value><br>        </array><br>    </property><br>    <property name="list"><br>        <list><br>            <value>list1</value><br>            <value>list2</value><br>            <value>list3</value><br>        </list><br>    </property><br>    <property name="set"><br>        <set><br>            <value>set1</value><br>            <value>set2</value><br>            <value>set3</value><br>        </set><br>    </property><br>    <property name="map"><br>        <map><br>            <entry key="1" value="value1"></entry><br>            <entry key="2" value="value1"></entry><br>            <entry key="3" value="value1"></entry><br>        </map><br>    </property><br></bean><br></beans></p><p>package com.test;</p><p>import com.collectiontype.Stu;<br>import org.junit.Test;<br>import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;</p><p>public class TestSpring5Demo1 {<br>    @Test<br>    public void testCollections(){<br>        ApplicationContext context =<br>                new ClassPathXmlApplicationContext(“collectionbean.xml”);<br>        Stu stu = context.getBean(“stu”, Stu.class);<br>        stu.testData();<br>    }<br>}</p><h3 id="2-5-2-在集合内部注入对象"><a href="#2-5-2-在集合内部注入对象" class="headerlink" title="2.5.2 在集合内部注入对象"></a>2.5.2 在集合内部注入对象</h3><!--?xml version="1.0" encoding="UTF-8"?--><p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"><br><bean id="stu" class="com.collectiontype.Stu"><br>  <property name="classlist"><br>      <list><br>        <!--使用ref来引用其他bean--><br>          <ref bean="course1"></ref><br>          <ref bean="course2"></ref><br>      </list><br>  </property><br></bean>  </beans></p><!--针对对象创建bean-->  <bean id="course1" class="com.collectiontype.Course">      <property name="className" value="Mybatis框架">  </property></bean>  <bean id="course2" class="com.collectiontype.Course">      <property name="className" value="Spring框架">  </property></bean>  <h3 id="2-5-3-把集合注入部分提取出来"><a href="#2-5-3-把集合注入部分提取出来" class="headerlink" title="2.5.3 把集合注入部分提取出来"></a>2.5.3 把集合注入部分提取出来</h3><p>在Spring配置文件中引入名称空间util</p><!--?xml version="1.0" encoding="UTF-8"?--><p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:uitl="http://www.springframework.org/schema/util" xmlns:util="http://www.springframework.org/schema/util" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/util  http://www.springframework.org/schema/beans/spring-util.xsd"><br>    <!--抽取公共部分--><br>    &lt;util:list id=”bookList”&gt;<br>        <value>易筋经</value><br>        <value>九阳神功</value><br>        <value>九阴真经</value><br>        <!--<ref bean="?"></ref>--><br>        <!--<ref bean="?"></ref>--><br>        <!--<ref bean="?"></ref>--><br>    <br>    <!--使用公共部分--><br>    <bean id="booklist" class="com.collectiontype.Book"><br>        <property name="bookNameList" ref="bookList"></property><br>    </bean><br></beans></p><h2 id="2-6-IOC操作Bean管理-工厂模式"><a href="#2-6-IOC操作Bean管理-工厂模式" class="headerlink" title="2.6 IOC操作Bean管理(工厂模式)"></a>2.6 IOC操作Bean管理(工厂模式)</h2><p>工厂模式：定义类型和返回类型不一样</p><ol><li>Spring有两种类型bean，一种普通bean，另外一种工厂bean(FactoryBean)</li><li>普通bean，在配置文件中定义bean类型就是返回类型</li><li>工厂bean：在配置文件定义bean类型可以和返回类型不一样</li></ol><p>第一步：创建类，让这个类作为工厂bean，实现接口FactoryBean</p><p>第二步：实现接口里面的方法，在实现的方法中定义返回的bean类型</p><p>package com.factory;</p><p>import com.collectiontype.Course;<br>import org.springframework.beans.factory.FactoryBean;</p><p>public class MyBean implements FactoryBean<course> {<br>    //定义返回的bean<br>    @Override<br>    public Course getObject() throws Exception {<br>        //返回的并不是MyBean而是course<br>        Course course = new Course();<br>        course.setClassName(“Mybatis”);<br>        return course;//这个方法的返回值，决定了通过spring获取的对象的来源<br>    }</course></p><pre><code>@Overridepublic Class&lt;?&gt; getObjectType() {    return null;}@Overridepublic boolean isSingleton() {    return false;}</code></pre><p>}</p><h2 id="2-7-Bean的作用域"><a href="#2-7-Bean的作用域" class="headerlink" title="2.7 Bean的作用域"></a>2.7 Bean的作用域</h2><ol><li>在Spring里面，可以设置bean实例是单实例还是多实例</li><li>在Spring里面，默认情况下，创建的bean是一个单实例对象</li></ol><p>在Spring配置文件的bean标签中，通过scope属性设置是单实例还是多实例</p><ul><li>singleton：表示单实例对象</li><li>prototype：表示多实例对象</li></ul><p>单实例和多实例的区别</p><ul><li>单实例：加载spring配置文件时就会创建单实例对象</li><li>多实例：并不是在加载配置文件的时候创建对象，而是在调用getBean方法的时候创建多实例对象</li></ul><h2 id="2-8-Bean的生命周期"><a href="#2-8-Bean的生命周期" class="headerlink" title="2.8 Bean的生命周期"></a>2.8 Bean的生命周期</h2><p>生命周期：从对象的创建到对象销毁的过程</p><ol><li>通过构造器创建bean实例（无参数构造）</li><li>为bean的属性设置值和对其他bean引用（调用set方法）</li><li>把bean的实例传递给bean后置处理器</li><li>调用bean的初始化方法（需要进行配置）init_method</li><li>把bean实例传递bean后置处理器</li><li>bean可以使用了（对象获取到了）</li><li>当容器在关闭的时候，调用bean的销毁的方法（需要进行配置销毁的方法）</li></ol><p>当配置了后置处理器后，在xml文件生命了后置处理器的bean，则当前配置文件的所有bean都会被应用后置处理器</p><ul><li><p>后置处理器：</p></li><li><p>创建类，实现接口BeanPostProcessor</p></li><li><p>重写before和after的方法</p></li><li><p>before先进行处理</p></li><li><p>after后进行处理</p></li></ul><h2 id="2-9-XML自动装配autowire"><a href="#2-9-XML自动装配autowire" class="headerlink" title="2.9 XML自动装配autowire"></a>2.9 XML自动装配autowire</h2><p>根据指定的装配规则（属性名称或者属性类型）不需要明确指定，Spring会自动将匹配的属性值进行注入。</p><p>autowre常用属性</p><ul><li>byName 根据属性名称注入：bean要注入的值和类里面属性的名称要一样</li><li>byType 根据属性类型注入：相同类型的bean不能定义多个</li></ul><p>自动装配实际开发中多数使用注解进行自动装配</p><!--?xml version="1.0" encoding="UTF-8"?--><p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"><br>    <bean id="emp" class="com.autowire.Emp" autowire="byName"></bean><br>    <bean id="dept" class="com.autowire.Dept"></bean><br></beans></p><h2 id="2-10-引入外部属性文件"><a href="#2-10-引入外部属性文件" class="headerlink" title="2.10 引入外部属性文件"></a>2.10 引入外部属性文件</h2><ul><li>引入名称空间 context</li><li>在spring配置文件中使用标签，引入外部属性文件</li><li>使用<code>${}</code>表达式来调用key的名称</li></ul><p>通常数据库配置文件会写到数据库连接池的propreties配置文件中，通过引入外部属性文件的方式引入。</p><h2 id="2-11-基于注解方式操作Bean管理"><a href="#2-11-基于注解方式操作Bean管理" class="headerlink" title="2.11 基于注解方式操作Bean管理"></a>2.11 基于注解方式操作Bean管理</h2><h3 id="2-11-1-注解的概念"><a href="#2-11-1-注解的概念" class="headerlink" title="2.11.1 注解的概念"></a>2.11.1 注解的概念</h3><p><strong>什么是注解</strong></p><p>注解是代码中的特殊标记，格式：@注解名称(属性=属性值,属性=属性值)</p><p><strong>注解作用位置</strong></p><ul><li>类</li><li>方法</li><li>属性</li></ul><p><strong>注解的目的</strong></p><p>使用注解可以简化xml配置</p><h3 id="2-11-2-Spring中创建对象提供的注解"><a href="#2-11-2-Spring中创建对象提供的注解" class="headerlink" title="2.11.2 Spring中创建对象提供的注解"></a>2.11.2 Spring中创建对象提供的注解</h3><p><a href="/Component"><strong>@Component</strong></a></p><p>常用的创建注解的方式</p><p><a href="/Service"><strong>@Service</strong></a></p><p>Service用在业务逻辑层或者Service层上</p><p><a href="/Controller"><strong>@Controller</strong></a></p><p>一般用在Web层上</p><p><a href="/Repository"><strong>@Repository</strong></a></p><p>一般用在Dao层、持久层上</p><p>上面的四个注解功能是一样的，都可以用来创建Bean实例。</p><h3 id="2-11-3-使用注解创建对象"><a href="#2-11-3-使用注解创建对象" class="headerlink" title="2.11.3 使用注解创建对象"></a>2.11.3 使用注解创建对象</h3><p><strong>Step1 引入依赖</strong></p><p>使用注解需要引入Aop依赖</p><p><strong>Step2 开启扫描</strong></p><!--?xml version="1.0" encoding="UTF-8"?--><p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>“<br>       xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>“<br>       xmlns:context=”<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>“<br>       xsi:schemaLocation=”<br>       <a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a> <a href="http://www.springframework.org/schema/beans/spring-beans.xsd">http://www.springframework.org/schema/beans/spring-beans.xsd</a><br>       <a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a> <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a></p><pre><code>    "&gt;&lt;!--开启组件扫描--&gt;&lt;!--如果扫描多个包，就使用,隔开--&gt;&lt;context:component-scan base-package="com2.demo"&gt;&lt;/context:component-scan&gt;</code></pre>  <p><strong>Step3 创建类，在类上面添加创建对象注解</strong></p><p>package com2.demo;</p><p>import org.springframework.stereotype.Component;<br>//注解中的value可以省略，默认值就是类名称首字母小写<br>@Component(value = “userService”)//<bean id="userService" class=".."><br>public class UserService {<br>    public void testMethod(){<br>        System.out.println(“这是通过注解创建的[“ + this.getClass() +”]对象中的方法”);<br>    }<br>}</bean></p><h3 id="2-11-4-组建扫描配置"><a href="#2-11-4-组建扫描配置" class="headerlink" title="2.11.4 组建扫描配置"></a>2.11.4 组建扫描配置</h3><!--?xml version="1.0" encoding="UTF-8"?--><p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>“<br>       xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>“<br>       xmlns:context=”<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>“<br>       xsi:schemaLocation=”<br>       <a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a> <a href="http://www.springframework.org/schema/beans/spring-beans.xsd">http://www.springframework.org/schema/beans/spring-beans.xsd</a><br>       <a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a> <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a></p><pre><code>    "&gt;&lt;!--设置只扫描内容--&gt;&lt;context:component-scan base-package="com2.demo" use-default-filters="false"&gt;    &lt;!--除了Controller以外的其他注解都不扫描--&gt;    &lt;context:include-filter type="annotation"                            expression="org.springframework.stereotype.Controller"/&gt;&lt;/context:component-scan&gt;&lt;!--设置不扫描内容--&gt;&lt;context:component-scan base-package="com2.demo"&gt;     &lt;!--除了Controller以外的其他注解都扫描--&gt;    &lt;context:exclude-filter type="annotation"                             expression="org.springframework.stereotype.Controller"/&gt;&lt;/context:component-scan&gt;</code></pre>  <h3 id="2-11-5-注解方式注入属性"><a href="#2-11-5-注解方式注入属性" class="headerlink" title="2.11.5 注解方式注入属性"></a>2.11.5 注解方式注入属性</h3><p><a href="/AutoWired"><strong>@AutoWired</strong></a></p><p>根据属性类型自动注入</p><ol><li>第一步，把service和dao对象创建，在service和dao类添加创建对象注解</li><li>第二步，在service注入dao对象，在service类添加dao类型属性，在属性上面使用注解（整个过程不需要添加set方法），autowired是根据类型进行注入。</li></ol><p><a href="/Qualifier"><strong>@Qualifier</strong></a></p><p>根据属性名称进行注入，要和AutoWired一起使用</p><p>如果根据类型注入，接口的多个实现类不一定能找到对应的海鲜类，通过Qualifier可以根据名称进行注入。</p><p><a href="/Resource"><strong>@Resource</strong></a></p><p>可以根据类型注入，也可以根据名称注入。</p><p>直接写Resource就是按照类型注入</p><p>在Resource中使用name注入的名字，就可以根据名称注入</p><p><a href="/Value"><strong>@Value</strong></a></p><p>注入普通类型属性</p><h1 id="三、AOP"><a href="#三、AOP" class="headerlink" title="三、AOP"></a>三、AOP</h1><h2 id="3-1-AOP框架基本概念"><a href="#3-1-AOP框架基本概念" class="headerlink" title="3.1 AOP框架基本概念"></a>3.1 AOP框架基本概念</h2><p><strong>什么是AOP</strong></p><p>AOP意为：面向切面编程，也可以叫面向方面编程。</p><p>AOP是OOP的一个延续，是软件开发中的一个热点。</p><p>通过使用AOP，可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑个部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>不通过修改源代码的方式添加新的功能</p><h2 id="3-2-AOP底层原理"><a href="#3-2-AOP底层原理" class="headerlink" title="3.2 AOP底层原理"></a>3.2 AOP底层原理</h2><p>AOP叫做面向切面编程，底层使用了动态代理的方式进行的实现。</p><p>在动态代理中有两种情况：</p><ol><li>有接口的情况：<br>使用JDK动态代理，创建接口实现类的代理对象，通过代理对象来实现功能增强</li><li>没有接口的情况：<br>使用CGLIB动态代理，创建当前类的子类的代理对象（创建子类作为代理对象，进行增强）</li></ol><h2 id="3-3-AOP操作前置知识"><a href="#3-3-AOP操作前置知识" class="headerlink" title="3.3 AOP操作前置知识"></a>3.3 AOP操作前置知识</h2><h3 id="3-3-1-JDK动态代理类实现"><a href="#3-3-1-JDK动态代理类实现" class="headerlink" title="3.3.1 JDK动态代理类实现"></a>3.3.1 JDK动态代理类实现</h3><p>使用JDK动态代理，使用Proxy类里面的方法创建代理对象，调用newProxyInstance方法获取代理类</p><ul><li><p>方法中有三个参数</p></li><li><p>类加载器</p></li><li><p>增强类所在接口（可以有多个接口）</p></li><li><p>InvocationHandle创建代理对象，写增强部分</p></li></ul><ol><li>创建接口和接口实现类</li></ol><p>package com.atguigu.spring5;</p><p>public interface UserDao {<br>    public int add(int a,int b);<br>    public String update(String id);<br>}</p><p>package com.atguigu.spring5;</p><p>public class UserDaoImpl implements UserDao{</p><pre><code>@Overridepublic int add(int a, int b) {    return a + b;}@Overridepublic String update(String id) {    return id;}</code></pre><p>}</p><ol start="2"><li>创建代理对象</li></ol><p>package com.atguigu.spring5;</p><p>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Method;<br>import java.lang.reflect.Proxy;<br>import java.util.Arrays;</p><p>public class JDKProxy {<br>    public static void main(String[] args){<br>        Class[] interfaces = {UserDao.class};<br>        UserDao userDao = new UserDaoImpl();<br>        UserDao dao = (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new UserDaoProxy(userDao));<br>        int add = dao.add(1, 2);<br>        System.out.println(add);<br>    }<br>}<br>class UserDaoProxy implements InvocationHandler{<br>    //传递被代理对象<br>    //有参构造传入<br>    private Object obj;<br>    public UserDaoProxy(Object obj){<br>        //使用Object增加通用性<br>        this.obj = obj;<br>    }<br>    @Override<br>    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br>        //方法之前处理<br>        System.out.println(“方法之前执行” + method.getName() + Arrays.toString(args));<br>        Object res = method.invoke(obj, args);//执行当前的方法<br>        //方法之后处理<br>        System.out.println(“方法之后执行” + obj);<br>        return res;<br>    }<br>}</p><h3 id="3-3-2-AOP操作中相关的术语"><a href="#3-3-2-AOP操作中相关的术语" class="headerlink" title="3.3.2 AOP操作中相关的术语"></a>3.3.2 AOP操作中相关的术语</h3><ol><li><p>连接点：类里面可以被增强的方法，就称为连接点</p></li><li><p>切入点：实际被真正增强的方法，称为切入点</p></li><li><p>通知(增强)：实际被增强的逻辑部分，称为通知</p></li><li><p>前置通知：在方法之前执行</p></li><li><p>后置通知：在方法之后执行</p></li><li><p>环绕通知：方法之前和之后执行</p></li><li><p>异常通知：出现异常后执行</p></li><li><p>最终通知：finally</p></li><li><p>切面：把通知应用到切入点的过程，叫做通知</p></li></ol><h2 id="3-4-AOP操作"><a href="#3-4-AOP操作" class="headerlink" title="3.4 AOP操作"></a>3.4 AOP操作</h2><h3 id="3-4-1-AspectJ"><a href="#3-4-1-AspectJ" class="headerlink" title="3.4.1 AspectJ"></a>3.4.1 AspectJ</h3><p>在Spring框架中，一般基于AspectJ实现AOP操作</p><p>AspectJ并不是spring的组成部分，而是一个独立框架，一般把AspectJ和Spring框架一起使用进行AOP操作</p><p>如果要基于AspectJ实现AOP操作有两种方式：</p><ul><li>基于Xml配置文件实现</li><li>基于注解方式实现</li></ul><h3 id="3-4-2-相关依赖"><a href="#3-4-2-相关依赖" class="headerlink" title="3.4.2 相关依赖"></a>3.4.2 相关依赖</h3><p>引入AOP相关依赖：</p><p>Spring的相关依赖以及aspectJ依赖</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32532235/1661562499544-42babbf3-f013-4326-aeca-b657dd37fa99.png"></p><h3 id="3-4-3-切入点表达式"><a href="#3-4-3-切入点表达式" class="headerlink" title="3.4.3 切入点表达式"></a>3.4.3 切入点表达式</h3><p>切入点表达式作用:知道对哪个勒里面的哪个方法进行增强</p><p>//语法结构<br>execution（[权限修饰符][返回类型][类犬路径][方法名称([参数列表])）<br>//示例1<br>execution（<em>com.atguigu.dao.BookDao.add(…）<br>//示例2：对com.atguigu.dao.BookDao的所有方法<br>execution（</em>com.atguigu.dao.BookDao.<em>(…）<br>//示例2：对com.atguigu.dao的所有类的所有方法<br> execution（</em>com.atguigu.dao.<em>.</em>(…）</p><h2 id="3-5-实现AOP操作"><a href="#3-5-实现AOP操作" class="headerlink" title="3.5 实现AOP操作"></a>3.5 实现AOP操作</h2><h3 id="3-5-1-基于注解实现AspectJ操作"><a href="#3-5-1-基于注解实现AspectJ操作" class="headerlink" title="3.5.1 基于注解实现AspectJ操作"></a>3.5.1 基于注解实现AspectJ操作</h3><ol><li>创建类，在类里面定义方法</li></ol><p>package com.atguigu.aopano;</p><p>public class User {<br>    public void add(){<br>        System.out.println(“add method”);<br>    }<br>}</p><ol start="2"><li>创建增强类，编写增强逻辑，让不同的方法实现不同的增强功能</li></ol><p>package com.atguigu.aopano;</p><p>public class UserProxy {<br>    public void before(){<br>        System.out.println(“before…”);<br>    }<br>}</p><ol start="3"><li>进行通知的配置</li></ol><ul><li>可以在spring配置文件中，开启注解扫描</li><li>使用注解创建User和UserProxy对象</li><li>在增强类上面添加注解<a href="/Aspect">@Aspect</a></li><li>在Spring的配置文件中开启生成代理对象</li></ul><ol start="4"><li>配置不同类型的通知，并且使用切入点表达式来配置</li></ol><!--?xml version="1.0" encoding="UTF-8"?--><p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd        "></beans></p><pre><code>&lt;!--开启注解扫描--&gt;&lt;context:component-scan base-package="com.atguigu.aopano"&gt;&lt;/context:component-scan&gt;&lt;!--开启AspectJ生成代理对象--&gt;&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></pre>  <p>package com.atguigu.aopano;</p><p>import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.Before;<br>import org.springframework.stereotype.Component;</p><p>@Component<br>@Aspect<br>public class UserProxy {<br>    //Before作为前置通知<br>    @Before(value = “execution(* com.atguigu.aopano.User.add(..))”)<br>    public void before(){<br>        System.out.println(“before…”);<br>    }<br>}</p><p>package com.atguigu.aopano;</p><p>import org.junit.Test;<br>import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;</p><p>public class TestAop {<br>    @Test<br>    public void test1(){<br>        ApplicationContext context = new ClassPathXmlApplicationContext(“com/atguigu/aopano/bean1.xml”);<br>        User user = context.getBean(“user”, User.class);<br>        user.add();</p><pre><code>}</code></pre><p>}</p><h3 id="3-5-2-不同类型的通知"><a href="#3-5-2-不同类型的通知" class="headerlink" title="3.5.2 不同类型的通知"></a>3.5.2 不同类型的通知</h3><ul><li>AfterReturning后置通知：在方法返回后执行</li><li>Before前置通知：在方法执行前执行</li><li>After 最终通知：在方法执行后通知</li><li>AfterThrowing 异常通知：在方法出现异常后通知</li><li>Around 环绕通知：可以通过参数调用ProceedingJoinPoint中的proceed方法执行被增强的方法</li></ul><p><strong>重用切入点</strong></p><p>通过定义方法并在方法上方加入切入点注解</p><p>@Pointcut，表示对公共方法进行抽取。</p><p>package com.atguigu.aopano;</p><p>import org.aspectj.lang.ProceedingJoinPoint;<br>import org.aspectj.lang.annotation.*;<br>import org.springframework.stereotype.Component;</p><p>@Component<br>@Aspect<br>public class UserProxy {<br>    //定义切入点方法，重用切入点<br>    @Pointcut(value=”execution(* com.atguigu.aopano.User.add(..))”)<br>    public void ponitcut(){</p><pre><code>}//Before作为前置通知@Before(value = "ponitcut()")public void before(){    System.out.println("before...");}</code></pre><p>  //After作为最终通知<br>    @After(value = “ponitcut()”)<br>    public void after(){<br>        System.out.println(“after”);<br>    }<br>  //AfterReturing作为后置通知<br>    @AfterReturning(value = “ponitcut()”)<br>    public void afterReturning(){<br>        System.out.println(“afterReturning”);<br>    }<br> //AfterThrowing作为异常通知<br>    @AfterThrowing(value=”ponitcut()”)<br>    public void afterThrowing(){<br>        System.out.println(“afterthrowing”);<br>    }<br>  //Around作为环绕通知<br>    @Around(value = “ponitcut()”)<br>    public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {<br>        System.out.println(“环绕前置”);<br>        proceedingJoinPoint.proceed();//执行方法<br>        System.out.println(“环绕后置”);<br>    }<br>}</p><p><strong>有多个增强类对同一个方法进行增强</strong></p><p>可以设置增强优先级。通过增强类上面添加注解@Order(int)，数字值越小优先级越高，优先级越高的越先执行。</p><h1 id="四、JdbcTemplate"><a href="#四、JdbcTemplate" class="headerlink" title="四、JdbcTemplate"></a>四、JdbcTemplate</h1><h2 id="4-1-JdbcTemplate概念"><a href="#4-1-JdbcTemplate概念" class="headerlink" title="4.1 JdbcTemplate概念"></a>4.1 JdbcTemplate概念</h2><p>Spring对JDBC进行封装，可以使用JdbcTemplate方便实现对数据库的操作</p><h2 id="4-2-准备工作"><a href="#4-2-准备工作" class="headerlink" title="4.2 准备工作"></a>4.2 准备工作</h2><ol><li>引入相关jar包，spring下的jdbc、orm、tx依赖以及德鲁伊数据库连接池和jdbc驱动</li><li>在spring的配置文件中配置连接池</li></ol><!--?xml version="1.0" encoding="UTF-8"?--><p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>“<br>       xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>“<br>       xmlns:context=”<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>“<br>       xmlns:aop=”<a href="http://www.springframework.org/schema/aop">http://www.springframework.org/schema/aop</a>“</p><pre><code>   xsi:schemaLocation="   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd    "&gt;&lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"&gt;    &lt;property name="url" value="jdbc:mysql://localhost/ssm"/&gt;    &lt;property name="username" value="root"/&gt;    &lt;property name="password" value="root"/&gt;    &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;&lt;/bean&gt;</code></pre>  <ol start="3"><li><p>配置JdbcTemplate对象，注入DataSource</p><!--创建jdbcTemplate的实例--><bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">    <!--注入datasource-->    <!--不通过有参构造器注入而是通过set方法注入-->    <property name="dataSource" ref="dataSource"></property></bean></li><li><p>创建Service类和Dao类，在Dao持久层注入jdbcTemplate对象，开启组件扫描</p></li></ol><p>package com.atguigu.jdbctemplate.service;</p><p>import com.atguigu.jdbctemplate.dao.UserDao;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Service;</p><p>@Service<br>public class UserService {</p><p>//    注入Dao<br>    @Autowired<br>    private UserDao userDao;<br>}</p><p>package com.atguigu.jdbctemplate.dao;</p><p>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.jdbc.core.JdbcTemplate;<br>import org.springframework.stereotype.Repository;</p><p>@Repository<br>public class UserDaoImpl implements UserDao {<br>    //注入jdbctemplate<br>    @Autowired<br>  //这里的JdbcTemplate根据xml配置文件中指定的实现自动装配<br>    private JdbcTemplate jdbcTemplate;</p><p>}</p><!--?xml version="1.0" encoding="UTF-8"?--><p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>“<br>       xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>“<br>       xmlns:context=”<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>“<br>       xmlns:aop=”<a href="http://www.springframework.org/schema/aop">http://www.springframework.org/schema/aop</a>“</p><pre><code>   xsi:schemaLocation="   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd    "&gt;&lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"&gt;    &lt;property name="url" value="jdbc:mysql://localhost/ssm"/&gt;    &lt;property name="username" value="root"/&gt;    &lt;property name="password" value="root"/&gt;    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;&lt;/bean&gt;&lt;!--创建jdbcTemplate的实例--&gt;&lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;    &lt;!--注入datasource--&gt;    &lt;!--不通过有参构造器注入而是通过set方法注入--&gt;    &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!--开启注解扫描--&gt;&lt;context:component-scan base-package="com.atguigu.jdbctemplate"&gt;&lt;/context:component-scan&gt;</code></pre>  <h2 id="4-3-添加功能的实现"><a href="#4-3-添加功能的实现" class="headerlink" title="4.3 添加功能的实现"></a>4.3 添加功能的实现</h2><ol><li>创建实体类</li></ol><p>package com.atguigu.jdbctemplate.pojo;</p><p>public class User {<br>    private int id;<br>    private String username;<br>    private String password;</p><pre><code>public int getId() {    return id;}public void setId(int id) {    this.id = id;}public String getUsername() {    return username;}public void setUsername(String username) {    this.username = username;}public String getPassword() {    return password;}public void setPassword(String password) {    this.password = password;}@Overridepublic String toString() {    return "User{" +            "id=" + id +            ", username='" + username + '\'' +            ", password='" + password + '\'' +            '}';}</code></pre><p>}</p><ol start="2"><li>在dao和service添加方法，在dao实现类中调用update方法</li></ol><p>update有两个参数<br>  String sql sql语句<br>  Object…args   设置sql语句中的值（替换占位符）</p><p>package com.atguigu.jdbctemplate.dao;</p><p>import com.atguigu.jdbctemplate.pojo.User;</p><p>public interface UserDao {<br>    int add(User user);<br>}</p><p>package com.atguigu.jdbctemplate.dao;</p><p>import com.atguigu.jdbctemplate.pojo.User;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.jdbc.core.JdbcTemplate;<br>import org.springframework.stereotype.Repository;</p><p>@Repository<br>public class UserDaoImpl implements UserDao {<br>    //注入jdbctemplate<br>    @Autowired<br>    private JdbcTemplate jdbcTemplate;</p><pre><code>@Overridepublic int add(User user) {   //1.创建sql语句    String sql = "insert into user values(?,?,?)";    //2.调用方法实现    int update = jdbcTemplate.update(sql, user.getId(), user.getUsername(), user.getPassword());    return update;//返回的是影响行数}</code></pre><p>}</p><p>package com.atguigu.jdbctemplate.service;</p><p>import com.atguigu.jdbctemplate.dao.UserDao;<br>import com.atguigu.jdbctemplate.pojo.User;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Service;</p><p>@Service<br>public class UserService {</p><p>//    注入Dao<br>    @Autowired<br>    private UserDao userDao;</p><pre><code>//添加的方法public void addUser(User user){    int add = userDao.add(user);    System.out.println("影响行数:" + add);}</code></pre><p>}</p><h2 id="4-4-修改和删除功能的实现"><a href="#4-4-修改和删除功能的实现" class="headerlink" title="4.4 修改和删除功能的实现"></a>4.4 修改和删除功能的实现</h2><p>package com.atguigu.jdbctemplate.dao;</p><p>import com.atguigu.jdbctemplate.pojo.User;</p><p>public interface UserDao {<br>    int add(User user);<br>    int update(User user);<br>    int delete(int id);<br>}</p><p>package com.atguigu.jdbctemplate.dao;</p><p>import com.atguigu.jdbctemplate.pojo.User;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.jdbc.core.JdbcTemplate;<br>import org.springframework.stereotype.Repository;</p><p>@Repository<br>public class UserDaoImpl implements UserDao {<br>    //注入jdbctemplate<br>    @Autowired<br>    private JdbcTemplate jdbcTemplate;</p><pre><code>@Overridepublic int add(User user) {    //1.创建sql语句    String sql = "insert into user values(?,?,?)";    //2.调用方法实现    Object[] args = {user.getId(),user.getUsername(),user.getPassword()};    int update = jdbcTemplate.update(sql,args);    return update;//返回的是影响行数}@Overridepublic int update(User user) {    String sql = "update user set id=?,name=?,password=?";    Object[] args = {user.getId(),user.getUsername(),user.getPassword()};    int update = jdbcTemplate.update(sql, args);    return update;}@Overridepublic int delete(int id) {    String sql = "delete from user where id=?";    int update = jdbcTemplate.update(sql, id);    return update;}</code></pre><p>}</p><p>package com.atguigu.jdbctemplate.service;</p><p>import com.atguigu.jdbctemplate.dao.UserDao;<br>import com.atguigu.jdbctemplate.pojo.User;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Service;</p><p>@Service<br>public class UserService {</p><p>//    注入Dao<br>    @Autowired<br>    private UserDao userDao;</p><pre><code>//添加的方法public void addUser(User user){    int add = userDao.add(user);    System.out.println("影响行数:" + add);}//通过id进行修改public void updateUser(User user){    userDao.update(user);}//通过id进行删除public void deleteUser(int id){    userDao.delete(id);}</code></pre><p>}</p><p>package com.atguigu.jdbctemplate.test;</p><p>import com.atguigu.jdbctemplate.pojo.User;<br>import com.atguigu.jdbctemplate.service.UserService;<br>import org.junit.Test;<br>import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;</p><p>public class TestUser {<br>    @Test<br>    public void testJdbcTemplate(){<br>        ApplicationContext context = new ClassPathXmlApplicationContext(“/com/atguigu/jdbctemplate/beanconfig.xml”);<br>        UserService userService = context.getBean(“userService”, UserService.class);<br>        //添加<br>        //        User u = new User();<br>        //        u.setId(1);<br>        //        u.setUsername(“abc”);<br>        //        u.setPassword(“bcd”);<br>        //        userService.addUser(u);<br>//        //修改<br>//        User u = new User();<br>//        u.setId(2);<br>//        u.setUsername(“a123”);<br>//        u.setPassword(“aaa”);<br>//        userService.updateUser(u);</p><pre><code>    //删除    userService.deleteUser(2);}</code></pre><p>}</p><h2 id="4-5-查询功能的实现"><a href="#4-5-查询功能的实现" class="headerlink" title="4.5 查询功能的实现"></a>4.5 查询功能的实现</h2><p>实现查询功能中的参数RowMapper接口，针对返回不同类型数据，使用这个接口里面的实现类完成数据封封装，BeanProperyRowpapper可以实现封装对象的功能</p><p>package com.atguigu.jdbctemplate.dao;</p><p>import com.atguigu.jdbctemplate.pojo.User;</p><p>import java.util.List;</p><p>public interface UserDao {<br>    int add(User user);<br>    int update(User user);<br>    int delete(int id);<br>    int queryCount();</p><pre><code>User queryById(int id);List&lt;User&gt; queryAll();</code></pre><p>}</p><p>package com.atguigu.jdbctemplate.dao;</p><p>import com.atguigu.jdbctemplate.pojo.User;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.jdbc.core.BeanPropertyRowMapper;<br>import org.springframework.jdbc.core.JdbcTemplate;<br>import org.springframework.stereotype.Repository;</p><p>import java.util.List;</p><p>@Repository<br>public class UserDaoImpl implements UserDao {<br>    //注入jdbctemplate<br>    @Autowired<br>    private JdbcTemplate jdbcTemplate;</p><pre><code>@Overridepublic int add(User user) {    //1.创建sql语句    String sql = "insert into user values(?,?,?)";    //2.调用方法实现    Object[] args = {user.getId(),user.getUsername(),user.getPassword()};    int update = jdbcTemplate.update(sql,args);    return update;//返回的是影响行数}@Overridepublic int update(User user) {    String sql = "update user set id=?,userame=?,password=?";    Object[] args = {user.getId(),user.getUsername(),user.getPassword()};    int update = jdbcTemplate.update(sql, args);    return update;}@Overridepublic int delete(int id) {    String sql = "delete from user where id=?";    int update = jdbcTemplate.update(sql, id);    return update;}@Overridepublic int queryCount() {    String sql = "select count(*) from user";    Integer queryCountNum = jdbcTemplate.queryForObject(sql, Integer.class);    return queryCountNum;}@Overridepublic User queryById(int id) {    String sql = "select * from user where id = ?";    User user = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper&lt;User&gt;(User.class), id);    return user;}@Overridepublic List&lt;User&gt; queryAll() {    String sql = "select * from user";    List&lt;User&gt; query = jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;User&gt;(User.class));    return query;}</code></pre><p>}</p><p>package com.atguigu.jdbctemplate.service;</p><p>import com.atguigu.jdbctemplate.dao.UserDao;<br>import com.atguigu.jdbctemplate.pojo.User;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Service;</p><p>import java.util.List;</p><p>@Service<br>public class UserService {</p><p>//    注入Dao<br>    @Autowired<br>    private UserDao userDao;</p><pre><code>//添加的方法public void addUser(User user){    int add = userDao.add(user);    System.out.println("影响行数:" + add);}//通过id进行修改public void updateUser(User user){    userDao.update(user);}//通过id进行删除public void deleteUser(int id){    userDao.delete(id);}//查询记录数public int queryCount(){    int i = userDao.queryCount();    System.out.println("总记录数" + i);    return i;}//根据id查询public User queryById(int id){    User user = userDao.queryById(id);    return user;}//查询所有数据public List&lt;User&gt; queryAll(){    List&lt;User&gt; users = userDao.queryAll();    return users;}</code></pre><p>}</p><p>package com.atguigu.jdbctemplate.service;</p><p>import com.atguigu.jdbctemplate.dao.UserDao;<br>import com.atguigu.jdbctemplate.pojo.User;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Service;</p><p>import java.util.List;</p><p>@Service<br>public class UserService {</p><p>//    注入Dao<br>    @Autowired<br>    private UserDao userDao;</p><pre><code>//添加的方法public void addUser(User user){    int add = userDao.add(user);    System.out.println("影响行数:" + add);}//通过id进行修改public void updateUser(User user){    userDao.update(user);}//通过id进行删除public void deleteUser(int id){    userDao.delete(id);}//查询记录数public int queryCount(){    int i = userDao.queryCount();    System.out.println("总记录数" + i);    return i;}//根据id查询public User queryById(int id){    User user = userDao.queryById(id);    return user;}//查询所有数据public List&lt;User&gt; queryAll(){    List&lt;User&gt; users = userDao.queryAll();    return users;}</code></pre><p>}</p><h2 id="4-6-批量操作"><a href="#4-6-批量操作" class="headerlink" title="4.6 批量操作"></a>4.6 批量操作</h2><h3 id="4-6-1批量添加"><a href="#4-6-1批量添加" class="headerlink" title="4.6.1批量添加"></a>4.6.1批量添加</h3><p>使用batchUpdate来进行批量操作</p><ul><li>参数1:sql语句</li><li>参数2:含有多条要添加数据的集合</li></ul><p>//添加多个数据<br>public void batchAdd(List&lt;Object[]&gt; list){<br>    userDao.batchAdd(list);<br>}</p><p>package com.atguigu.jdbctemplate.dao;</p><p>import com.atguigu.jdbctemplate.pojo.User;</p><p>import java.util.List;</p><p>public interface UserDao {<br>    int add(User user);<br>    int update(User user);<br>    int delete(int id);<br>    int queryCount();</p><pre><code>User queryById(int id);List&lt;User&gt; queryAll();void batchAdd(List&lt;Object[]&gt; list);</code></pre><p>}</p><p>package com.atguigu.jdbctemplate.dao;</p><p>import com.atguigu.jdbctemplate.pojo.User;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.jdbc.core.BeanPropertyRowMapper;<br>import org.springframework.jdbc.core.JdbcTemplate;<br>import org.springframework.stereotype.Repository;</p><p>import java.util.List;</p><p>@Repository<br>public class UserDaoImpl implements UserDao {<br>    //注入jdbctemplate<br>    @Autowired<br>    private JdbcTemplate jdbcTemplate;</p><pre><code>@Overridepublic int add(User user) {    //1.创建sql语句    String sql = "insert into user values(?,?,?)";    //2.调用方法实现    Object[] args = {user.getId(),user.getUsername(),user.getPassword()};    int update = jdbcTemplate.update(sql,args);    return update;//返回的是影响行数}@Overridepublic int update(User user) {    String sql = "update user set id=?,userame=?,password=?";    Object[] args = {user.getId(),user.getUsername(),user.getPassword()};    int update = jdbcTemplate.update(sql, args);    return update;}@Overridepublic int delete(int id) {    String sql = "delete from user where id=?";    int update = jdbcTemplate.update(sql, id);    return update;}@Overridepublic int queryCount() {    String sql = "select count(*) from user";    Integer queryCountNum = jdbcTemplate.queryForObject(sql, Integer.class);    return queryCountNum;}@Overridepublic User queryById(int id) {    String sql = "select * from user where id = ?";    User user = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper&lt;User&gt;(User.class), id);    return user;}@Overridepublic List&lt;User&gt; queryAll() {    String sql = "select * from user";    List&lt;User&gt; query = jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;User&gt;(User.class));    return query;}@Overridepublic void batchAdd(List&lt;Object[]&gt; list) {    String sql = "insert into user values(?,?,?)";    int[] ints = jdbcTemplate.batchUpdate(sql, list);}</code></pre><p>}</p><p>@Test<br>public void addAll(){<br>    ApplicationContext context = new ClassPathXmlApplicationContext(“/com/atguigu/jdbctemplate/beanconfig.xml”);<br>    UserService userService = context.getBean(“userService”, UserService.class);<br>    //批量添加<br>    List&lt;Object[]&gt; batchArgs = new ArrayList&lt;&gt;();<br>    Object[] o1 = {11,”java”,”aaa”};<br>    Object[] o2 = {12,”java12”,”ssfaaa”};<br>    Object[] o3 = {13,”java13”,”adfaaa”};<br>    batchArgs.add(o1);<br>    batchArgs.add(o2);<br>    batchArgs.add(o3);<br>    userService.batchAdd(batchArgs);<br>}</p><h3 id="4-6-2-批量修改"><a href="#4-6-2-批量修改" class="headerlink" title="4.6.2 批量修改"></a>4.6.2 批量修改</h3><p>//批量修改<br>public void batchUpdate(List&lt;Object[]&gt; list){<br>    userDao.batchUpdate(list);<br>}</p><p>void batchUpdate(List&lt;Object[]&gt; list);</p><p>@Override<br>public void batchUpdate(List&lt;Object[]&gt; list) {<br>    String sql = “update user set username=?,password=? where id = ?”;<br>    jdbcTemplate.batchUpdate(sql,list);<br>}</p><p>@Test<br>public void updateAll(){<br>    ApplicationContext context = new ClassPathXmlApplicationContext(“/com/atguigu/jdbctemplate/beanconfig.xml”);<br>    UserService userService = context.getBean(“userService”, UserService.class);<br>    //批量修改<br>    List&lt;Object[]&gt; batchArgs = new ArrayList&lt;&gt;();<br>    Object[] o1 = {“Ujava”,”aaa”,11};<br>    Object[] o2 = {“Ujava12”,”ssfaaa”,12};<br>    Object[] o3 = {“Ujava13”,”adfaaa”,13};<br>    batchArgs.add(o1);<br>    batchArgs.add(o2);<br>    batchArgs.add(o3);<br>    userService.batchUpdate(batchArgs);<br>}</p><h3 id="4-6-3-批量删除"><a href="#4-6-3-批量删除" class="headerlink" title="4.6.3 批量删除"></a>4.6.3 批量删除</h3><p>//批量删除<br>public void batchDelete(List&lt;Object[]&gt; list){<br>    userDao.batchDelete(list);<br>}</p><p>void batchDelete(List&lt;Object[]&gt; list);</p><p>@Override<br>public void batchDelete(List&lt;Object[]&gt; list) {<br>    String sql = “delete from user where id=?”;<br>    jdbcTemplate.batchUpdate(sql,list);<br>}</p><p>@Test<br>public void deleteAll(){<br>    ApplicationContext context = new ClassPathXmlApplicationContext(“/com/atguigu/jdbctemplate/beanconfig.xml”);<br>    UserService userService = context.getBean(“userService”, UserService.class);<br>    //批量删除<br>    List&lt;Object[]&gt; batchArgs = new ArrayList&lt;&gt;();<br>    Object[] o1 = {11};<br>    Object[] o2 = {12};<br>    Object[] o3 = {13};<br>    batchArgs.add(o1);<br>    batchArgs.add(o2);<br>    batchArgs.add(o3);<br>    userService.batchDelete(batchArgs);<br>}</p><h1 id="五、事务"><a href="#五、事务" class="headerlink" title="五、事务"></a>五、事务</h1><h2 id="5-1-事务概念"><a href="#5-1-事务概念" class="headerlink" title="5.1 事务概念"></a>5.1 事务概念</h2><p>事务是数据库操作的基本单元，逻辑上一组操作，要么都成功，要么都不成功，如果有一个失败则所有操作都失败。</p><p>典型场景：银行转账</p><h2 id="5-2-ACID特性"><a href="#5-2-ACID特性" class="headerlink" title="5.2 ACID特性"></a>5.2 ACID特性</h2><p>1、原子性：过程不可分割，要么都成功要么都不成功</p><p>2、一致性：操作之前和操作之后的总量不变</p><p>3、隔离性：多事务操作不会互相产生影响</p><p>4、持久性：事务提交后表中数据会变化</p><h2 id="5-3-搭建事务的操作环境"><a href="#5-3-搭建事务的操作环境" class="headerlink" title="5.3 搭建事务的操作环境"></a>5.3 搭建事务的操作环境</h2><p>Dao层来操作数据，Service业务操作，Web层展示视图交互</p><p>在Dao层创建两个方法：增加余额和减少余额</p><p>在Service层调用Dao层的两个方法</p><h2 id="5-4-事务管理"><a href="#5-4-事务管理" class="headerlink" title="5.4 事务管理"></a>5.4 事务管理</h2><p>1，事务需要添加到JavaEE三层结构里面的Service层中</p><p>2，在Spring进行事务管理操作一般有两种方式</p><ul><li>编程式事务管理</li><li>声明式事务管理(一般使用)</li></ul><p>使用声明式事务管理可以通过注解方式和xml配置文件方式，一般通过注解方式进行配置</p><p>在Spring进行声明式事务管理，底层使用的是AOP原理</p><p>Spring事务管理的API</p><ul><li>提供一个接口代表事务管理器，针对不同框架提供了不同的实现类 ：PlatformTransactionManager，使用mybatis和jdbc数据库连接池时使用的是DataSourceTransctionManager实现类</li></ul><h1 id="六、Spring声明事务管理"><a href="#六、Spring声明事务管理" class="headerlink" title="六、Spring声明事务管理"></a>六、Spring声明事务管理</h1><h2 id="6-1-注解声明式事务管理"><a href="#6-1-注解声明式事务管理" class="headerlink" title="6.1 注解声明式事务管理"></a>6.1 注解声明式事务管理</h2><ol><li>在Spring配置文件配置事务管理器</li></ol><!--创建事务管理器--><bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    <property name="dataSource" ref="dataSource"></property></bean>  <ol start="2"><li>在Spring配置文件开启事务注解</li></ol><!--创建事务管理器--><bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    <property name="dataSource" ref="dataSource"></property></bean><!--配置开启事务注解--><!--首先需要引入名称空间tx--><tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>  <p>3.在service类上面或者方法上面添加事务注解</p><p>package com.atguigu.transactiontest.service;</p><p>import com.atguigu.transactiontest.dao.UserDao;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Service;<br>import org.springframework.transaction.annotation.Transactional;<br>//如果把这个注解加到类上面，代表这个类里面所有的方法都添加事务<br>//如果把这个注解添加到方法上面，代表这个方法添加事务<br>@Service<br>@Transactional<br>public class UserService {<br>    @Autowired<br>    private UserDao userDao;</p><pre><code>public void accountMoney(){    //lucy减少100    userDao.reduceMoney();    //marry增加100    userDao.addMoney();}</code></pre><p>}</p><h2 id="6-2-事务参数：传播行为"><a href="#6-2-事务参数：传播行为" class="headerlink" title="6.2 事务参数：传播行为"></a>6.2 事务参数：传播行为</h2><p>在Transactional注解中可以配置事务相关参数</p><ul><li>propagation():事务传播行为</li><li>isolation():事务隔离级别</li><li>timeout：超时时间</li><li>readOnly：是否只读</li><li>rollbackFor：回滚</li><li>norollbackFor：不回滚</li></ul><p>propagation代表事务的传播行为，可以设置多个事务方法直接进行调用，这个过程中事务是如何进行管理的。</p><ul><li>事务方法：对数据库表数据变化的操作</li><li>传播行为：通过有事务方法调用没事务方法。或者 &nbsp; 通过没事务方法调用有事务方法如何处理</li></ul><p>在Spring框架事务传播行为有七种行为</p><ol><li><strong>典型</strong>REQUIRED：（默认使用REQUIRED行为）如果有事务正在运行，当前的方法就在这个事务内运行，否则就启动一个新的事务，并在自己的事务内运行</li><li><strong>典型</strong>REQUIRED_NEW：当前的方法必须启动新事务并且在自己的事务内运行，如果有事务正在运行就将它挂起</li><li>(不常用)SUPPORTS：如果有事务正在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务中</li><li>(不常用)NOT_SUPPORTS：当前的方法不运行在事务中，如果有运行的事务，则将它挂起</li><li>(不常用)MANDATORY：当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常</li><li>(不常用)NEVER：当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常</li><li>(不常用)NESTED：如果有事务正在运行，当前的方法就应该在这个事务的嵌套事务内运行，否则就启动一个新的事务，并在他自己的事务中运行</li></ol><h2 id="6-3-事务参数：隔离级别"><a href="#6-3-事务参数：隔离级别" class="headerlink" title="6.3 事务参数：隔离级别"></a>6.3 事务参数：隔离级别</h2><p>事务有一个典型的特性：隔离性。多事务操作之间不会产生影响，如果不考虑隔离性会产生很多问题。</p><ul><li>脏读：一个没提交的事务读取到另一个没有提交事务的数据，如：银行余额已经被减少100但是还没提交事务，另一个事务过来操作了这个银行余额</li><li>不可重复读：一个没有提交的事务获取到的是另一个提交之后修改的数据，不可重复读是一种现象，不能算是一种问题</li><li>幻读： 一个没有提交的事务获取到的是另一个提交之后添加的数据</li></ul><p>通过设置隔离级别参数isolation可以进行隔离级别的区分</p><p>脏读</p><p>不可重复读</p><p>幻读</p><p>READ UNCOMMITTED 读已提交</p><p>有</p><p>有</p><p>有</p><p>READ COMMITTED 读未提交</p><p>无</p><p>有</p><p>有</p><p>REPEATBLE READ &nbsp;可重复读</p><p>无</p><p>无</p><p>有</p><p>SERIALIZABLE 串行化</p><p>无</p><p>无</p><p>无</p><p>Mysql默认使用的是可重复读</p><h2 id="6-4-事务参数：其他参数"><a href="#6-4-事务参数：其他参数" class="headerlink" title="6.4 事务参数：其他参数"></a>6.4 事务参数：其他参数</h2><p>timeout：超时时间，事务需要在规定时间内必须操作完成进行提交，如果不提交进行回滚，这个参数可以设置超时时间的限制，以秒为单位。默认值是-1，就是不超时。</p><p>readOnly：表示是否只读，读：查询操作，写：添加修改删除操作。这个参数默认值是false，表示可以进行增删改查操作，但是可以设置为true，设置为true后，就只能做查询操作，不能做修改操作。</p><p>rollbackFor：表示回滚，可以设置运行中出现了哪些异常进行事务回滚</p><p>noRollbackFor：表示设置哪些异常后不会回滚。以异常类.class结尾</p><h1 id="七、Spring框架新功能"><a href="#七、Spring框架新功能" class="headerlink" title="七、Spring框架新功能"></a>七、Spring框架新功能</h1><ol><li>整个Spring框架的代码基于Java8，运行时兼容JDK9，许多不建议使用的类和方法已经在代码库中删除。</li><li>Spring5框架字带了通用的日志封装（Spring4j已经被移除，官方建议使用Log4j2）</li></ol><h2 id="7-1-整合log4j"><a href="#7-1-整合log4j" class="headerlink" title="7.1 整合log4j"></a>7.1 整合log4j</h2><p>第一步：将依赖引入</p><p>第二部：写好log4j2.xml配置文件</p><!--?xml version="1.0" encoding="UTF-8"?--><!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL --><!--Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出--><configuration status="INFO">    <!--先定义所有的appender-->    <appenders>        <!--输出日志信息到控制台-->        <console name="Console" target="SYSTEM_OUT">            <!--控制日志输出的格式-->            <patternlayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n">        </patternlayout></console>    </appenders>    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->    <!--root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出-->    <loggers>        <root level="info">            <appender-ref ref="Console">        </appender-ref></root>    </loggers></configuration>  <p>自定义log4j</p><p>package com.atguigu.transactiontest.test;</p><p>import org.slf4j.Logger;<br>import org.slf4j.LoggerFactory;</p><p>public class UserLogger {<br>    private static final Logger log = LoggerFactory.getLogger(UserLogger.class);</p><pre><code>public static void main(String[] args){    log.info("hello log4j");    log.warn("hello warn");}</code></pre><p>}</p><h2 id="7-2-Nullable注解"><a href="#7-2-Nullable注解" class="headerlink" title="7.2 Nullable注解"></a>7.2 Nullable注解</h2><p>Spring5框架核心容器支持@Nullable注解</p><p>这个注解可以使用在方法上、属性上或参数上，</p><ul><li>方法上的返回值可以为空</li><li>属性值可以为空</li><li>参数值可以为空</li></ul><h2 id="7-3-Webflux"><a href="#7-3-Webflux" class="headerlink" title="7.3 Webflux"></a>7.3 Webflux</h2><p>完成后单独学习</p></bean>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
